<?xml version="1.0" encoding="UTF-8"?>
<snippetsTree>
 <snippets file="mig01/PMC7219074/results/search/migration/results.xml">
  <result pre="solve this problem, this paper proposes a resource-constrained smart service" exact="migration" post="framework for edge computing environment in IoT (IoT-RECSM) and"/>
  <result pre="computing environment in IoT (IoT-RECSM) and a dynamic edge service" exact="migration" post="algorithm. Based on this algorithm, the framework can dynamically"/>
  <result pre="of edge service in real-time. Finally, an edge smart services" exact="migration" post="prototype system is implemented to simulate the edge service"/>
  <result pre="migration prototype system is implemented to simulate the edge service" exact="migration" post="in IoT environment. Based on the system, an IoT"/>
  <result pre="evaluate the proposed approach. According to the experiment results, service" exact="migration" post="among edge nodes not only maintains the stability of"/>
  <result pre="cloud center. Internet of Things edge computing resource-constrained smart service" exact="migration" post="1. Introduction The edge-based computing paradigm (ECP) is one"/>
  <result pre="the above problem, this paper proposes a resource-constrained smart service" exact="migration" post="framework for edge computing environment in IoT (IoT-RECSM) and"/>
  <result pre="computing environment in IoT (IoT-RECSM) and a dynamic edge service" exact="migration" post="algorithm. Based on this algorithm, the framework can dynamically"/>
  <result pre="migrating probability value of each edge service. In addition, a" exact="migration" post="service selection model is presented to determine which services"/>
  <result pre="the edge node can be selected as the destination of" exact="migration" post="services by analyzing the edge node resource and migration"/>
  <result pre="of migration services by analyzing the edge node resource and" exact="migration" post="delay. Finally, a prototype system is implemented to simulate"/>
  <result pre="a prototype system is implemented to simulate the edge service" exact="migration" post="in IoT environment. Based on the prototype system, an"/>
  <result pre="performance of the IoT-RECSM. According to the experiment results, service" exact="migration" post="among edge nodes not only maintains the stability of"/>
  <result pre="Rychlý [20] proposed a RESTful-based framework for Mobile Web service" exact="migration" post="and provisioning on both Android-based mobile devices and Java-based"/>
  <result pre="[24] proposed an architecture for transparent service continuity via double-tier" exact="migration" post="(ARNAB) that is based on container migration. When ARNAB"/>
  <result pre="both the existing virtualization techniques (e.g., Virtual Machine, Containers) and" exact="migration" post="techniques (e.g., Cold migration, Pre-copy migration, Post-copy migration, VM"/>
  <result pre="edge. Most of the above frameworks focus on the service" exact="migration" post="between cloud and edge nodes, such as ENORM, Crystal"/>
  <result pre="Battery Consumption and CPU Usage Consumption of devices. Moreover, container-based" exact="migration" post="framework can effectively deal with the heterogeneity of different"/>
  <result pre="environments for services. The IoT-RECSM will focus on the service" exact="migration" post="among edge nodes to deal with the resource-constrained problem"/>
  <result pre="It also adopts the container-based technology to facilitate the service" exact="migration" post="smoothly. 2.2. Service Migration Algorithm Tziritas et al. [26]"/>
  <result pre="VMs and data. Bittencourt et al. [27] summarized two type" exact="migration" post="strategies: non-live migration and live migration, and analyzed the"/>
  <result pre="Bittencourt et al. [27] summarized two type migration strategies: non-live" exact="migration" post="and live migration, and analyzed the scheduling problem in"/>
  <result pre="placement decisions for cloud service. Reference [27] presented a non-live" exact="migration" post="strategy and a live migration strategy, in which the"/>
  <result pre="Reference [27] presented a non-live migration strategy and a live" exact="migration" post="strategy, in which the live strategy can effectively deal"/>
  <result pre="following the non-live strategy, the IoT-RECSM will design a distributed" exact="migration" post="algorithm for the edge environment to dynamically manage the"/>
  <result pre="evaluation metric of resource usage for edge services. The service" exact="migration" post="layer is the core of the Edge Environment, which"/>
  <result pre="to take charge of the service migration. A smart service" exact="migration" post="algorithm is constructed for E N s . It"/>
  <result pre="It can assist the E N to dynamically arrange the" exact="migration" post="node when the E N is resource-critical. If none"/>
  <result pre="resource-critical. If none of E N is suited as the" exact="migration" post="node, it migrates the service to Cloud. Table 1"/>
  <result pre="choose a proper node as the hosting place for the" exact="migration" post="service. This model tries to find a resource-rich node"/>
  <result pre="find a resource-rich node as the hosting place with minimal" exact="migration" post="delay. To facilitate the construction of this model, edge"/>
  <result pre="N M F ) [29] is introduced to evaluate the" exact="migration" post="delay. In the IoT edge environment, edge nodes are"/>
  <result pre="communication modes. In the process of service migration, a non-live" exact="migration" post="strategy is adopted to reduce the complexity of service"/>
  <result pre="Thus, the N M F method can precisely measure the" exact="migration" post="delay based on the edge network model. An edge"/>
  <result pre="a migrating service S v i , j , the" exact="migration" post="delay d e l a y i , n"/>
  <result pre="Edge Service Migration Algorithm In this section, a dynamic service" exact="migration" post="algorithm is presented by combing the resource utilization model,"/>
  <result pre="is provided for each edge node to complete the service" exact="migration" post="automatically. Algorithm 2 Dynamic Edge Smart Service Migration. Require:"/>
  <result pre="After getting the hosting node, this algorithm can compute the" exact="migration" post="delay between v i and other nodes v t"/>
  <result pre="based on the edge node selection mode to get the" exact="migration" post="destination d e s t . If none of"/>
  <result pre="of θ m a x will influence the time of" exact="migration" post="smart service and last effect the stability of edge"/>
  <result pre="Finally, the system can be started to simulate the service" exact="migration" post="and show the real-time information in LOGS INFORMATION UI"/>
  <result pre="work of smart service migration, the total number of service" exact="migration" post="among edge nodes is showed in the sub-tab of"/>
  <result pre="Prototype System In this section, a case of edge service" exact="migration" post="is simulated based on the prototype system. In this"/>
  <result pre="randomly selected from Table 3. The experiment result of service" exact="migration" post="is shown in Table 4. According to the experiment"/>
  <result pre="services among edge nodes is 195. In addition, the total" exact="migration" post="storage size is 92,1963 GB. Moreover, the total execution"/>
  <result pre="is 92,1963 GB. Moreover, the total execution time of service" exact="migration" post="among edge nodes is 241 s. Compared with the"/>
  <result pre="Compared with the cloud migration, the efficiency of edge service" exact="migration" post="is improved about three times. 5. Conclusions This paper"/>
  <result pre="5. Conclusions This paper has proposed a resource-constrained smart service" exact="migration" post="framework for the edge computing environment in IoT and"/>
  <result pre="edge computing environment in IoT and a dynamic edge service" exact="migration" post="algorithm. The IoT-RECSM can ensure the resource load of"/>
  <result pre="services of resource-critical nodes to resource-rich nodes. A smart service" exact="migration" post="method has also constructed for the IoT-RECSM, which can"/>
  <result pre="to dynamically monitor and migrate services. Finally, a smart service" exact="migration" post="prototype system has been implemented to simulate the service"/>
  <result pre="migration prototype system has been implemented to simulate the service" exact="migration" post="based on IoT-RECSM. An IoT case including 10 nodes"/>
  <result pre="to evaluate our approach. According to the experiment results, service" exact="migration" post="among edge nodes not only maintains the stability of"/>
  <result pre="and ongoing work for the IoT-RECSM. Currently, the simulation of" exact="migration" post="delay in the algorithm is not universal, cannot deal"/>
  <result pre="the algorithm is not universal, cannot deal with the Pre-copy" exact="migration" post="and Post-copy migration very well. We will improve the"/>
  <result pre="not universal, cannot deal with the Pre-copy migration and Post-copy" exact="migration" post="very well. We will improve the simulation method of"/>
  <result pre="migration very well. We will improve the simulation method of" exact="migration" post="delay to adapt to live migration in future work."/>
  <result pre="the simulation method of migration delay to adapt to live" exact="migration" post="in future work. Moreover, the dynamical service migration approach"/>
  <result pre="to live migration in future work. Moreover, the dynamical service" exact="migration" post="approach of IoT-RECSM is complex. It needs to consume"/>
  <result pre="to consume some additional resources to compute the parameters of" exact="migration" post="models in real-time, which may restrict the efficiency of"/>
  <result pre="learning technologies into the edge service migration. It pre-learns a" exact="migration" post="model for every node according to the historical log"/>
  <result pre="historical log information of resource consumption. And then, a distributed" exact="migration" post="algorithm can be easily designed for the nodes. Author"/>
  <result pre="GUET Graduate Education(No.2019YCXS049). Conflicts of Interest The authors declare no" exact="conflict" post="of interest. References References 1.NegashB.RahmaniA.M.LiljebergP.JantschA.Fog computing fundamentals in the"/>
  <result pre="with criteria interactionsFuture Gener. Comput. Syst.201994749764 20.KazzazM.M.RychlýM.Restful-based mobile Web service" exact="migration" post="frameworkProceedings of the 2017 IEEE International Conference on AI"/>
  <result pre="in Edge Computing SystemsIEEE Trans. Sustain. Comput.2017232033210.1109/TSUSC.2017.2715662 27.BittencourtL.F.LopesM.M.PetriI.RanaO.F.Towards virtual machine" exact="migration" post="in edge computingProceedings of the IEEE 10th International Conference"/>
 </snippets>
</snippetsTree>
